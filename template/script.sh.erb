#!/usr/bin/env bash

# This script start up rstudio server from a container. It originates
# from a template script with minimal ood processing parameters.
# 
# The script is a mixture of a locally (MCC) developed script and
# https://github.com/OSC/bc_osc_rstudio_server/blob/master/template/script.sh.erb
# and
# https://github.com/UCL-ARC/ood-rstudio-app/blob/main/template/script.sh.erb
#
# High-level overview:
#  - setup environment variables
#  - setup paths (permanent and temporary) for system logs, configs, etc
#  - execute (in container) rstudio server

##################################################################
#-
#- Function definitions
#-
##################################################################
create_log_config() {
   LOG_CF=$1
   if [ ! -f "$LOG_CF" ]; then
      printf "[*]\nlogger-type=file\nlog-dir=/var/log/rstudio\n" > ${LOG_CF}
      printf "log-level=info\n" >> ${LOG_CF}
   fi
}
create_db_config() {
   DB_CF=$1
   if [ ! -f "$DB_CF" ]; then
      printf "provider=sqlite\ndirectory=/var/lib/rstudio-server\n" > ${DB_CF}
   fi
}
###################################################################
#
# Several key variables needed through the script.
# session is from OOD
# - WORKING_DIR (session_dir)
# - LOG_DIR (WORKING_DIR/logs)
# - TMP_DIR (unique temp directory)

WORKING_DIR="<%= session.staged_root %>"
R_VERSION="<%= context.r_version %>"
LOG_DIR="${WORKING_DIR}/log"  #  local logging output
BIN_DIR="${WORKING_DIR}/bin"    # local bin (for session-specific tasks)
TMP_DIR=$(mktemp -d)    # session-specific /tmp
JOB_LOG="${LOG_DIR}/job_startup.log"
## RStudio variables: some are session-specific, others are global
## We maintain configuration across jobs in ~/.local/share/rstudio_server
RSTUDIO_SERVER_DIR=${HOME}/.local/share/rstudio_server
RSTUDIO_VAR_LIB=${RSTUDIO_SERVER_DIR}/var/lib
RSTUDIO_OPT_SHARE=${RSTUDIO_SERVER_DIR}/opt/share
RSTUDIO_VAR_RUN=${WORKING_DIR}/var/run
RSTUDIO_ETC=${RSTUDIO_SERVER_DIR}/etc
RSTUDIO_VAR_LOG=${LOG_DIR}
# PAM auth helper used by RStudio
RSTUDIO_AUTH="${BIN_DIR}/auth"
RSTUDIO_RSESSION="${BIN_DIR}/rsession.sh"

# "APPTAINERENV" must preceed anything exported to apptainer environment.
export APPTAINERENV_RSTUDIO_PASSWORD="$password"
#if [ "$R_VERSION" = "modified" ]; then
#  export RSTUDIO_CONTAINER_URI="docker://dockerhub.moffitt.org/ood/rocker-rstudio-modified:latest"
#else
#  if [ "$R_VERSION" = "ml" ]; then
#    export RSTUDIO_CONTAINER_URI="docker://dockerhub.moffitt.org/ood/rocker-multi:latest"
#  else
#    export RSTUDIO_CONTAINER_URI="docker://dockerhub.moffitt.org/hpc/rocker-rstudio:$R_VERSION"
#  fi
#fi

if [ "$R_VERSION" = "modified" ]; then
  export RSTUDIO_CONTAINER_URI="docker://dockerhub.moffitt.org/ood/rocker-rstudio-modified:latest"
elif [ "$R_VERSION" = "ml" ]; then
  export RSTUDIO_CONTAINER_URI="docker://dockerhub.moffitt.org/ood/rocker-multi:latest"
else
  export RSTUDIO_CONTAINER_URI="docker://dockerhub.moffitt.org/hpc/rocker-rstudio:$R_VERSION"
fi

# Initialize environment for execution.
mkdir -p ${LOG_DIR}
echo "`date`: Initializing RStudio environment" >> ${JOB_LOG}
echo "`date`: R Version $R_VERSION" >> ${JOB_LOG}
echo "`date`: Using docker URI $RSTUDIO_CONTAINER_URI" >> ${JOB_LOG}

# setup_env
# Load the required environment. Containers shouldn't need much...
setup_env () {
  source /etc/profile.d/modules.sh
  export MODULEPATH=$MODULEPATH:/app/eb/modules/all:/app/other/modules
  module purge
}
setup_env

####################################################################
#- workspace_init
# A persistant rstudio state is used. The rstudio container defaults to system locations for 
# rstudio server components. Session components are already managed in ~/.local/share/rstudio.
# We create a local ver of this system state and setup bind points to override the system locations.
#
# There are several key directories/files that are needed:
#  - /var/log/rstudio
#  - /etc/rstudio/logging.conf
#  - /etc/rstudio/database.conf
#  - /var/lib/rstudio-server
mkdir -p -m 700 \
	"${RSTUDIO_SERVER_DIR}" \
	"${RSTUDIO_ETC}" \
	"${RSTUDIO_OPT_SHARE}" \
	"${RSTUDIO_VAR_LOG}" \
	"${RSTUDIO_VAR_LIB}" \
	"${RSTUDIO_VAR_RUN}"
touch "${RSTUDIO_VAR_RUN}/rstudio-server.pid"
create_log_config "${RSTUDIO_ETC}/logging.conf"
create_db_config "${RSTUDIO_ETC}/database.conf"

# set_variables
# There are a number of environment variables to setup for execution.
# - apptainer variables
# - rstudio variables

########################################
# apptainer variables
# https://apptainer.org/docs/user/main/cli/apptainer_exec.html

BIND_POINTS=""\
"${RSTUDIO_ETC}/database.conf:/etc/rstudio/database.conf,"\
"${RSTUDIO_ETC}/logging.conf:/etc/rstudio/logging.conf,"\
"${RSTUDIO_VAR_LOG}:/var/log/rstudio,"\
"${RSTUDIO_VAR_LIB}:/var/lib/rstudio-server,"\
"${RSTUDIO_VAR_RUN}:/run/rstudio-server,"\
"${RSTUDIO_OPT_SHARE}:/opt/share,"\
"${TMP_DIR}:/tmp"

echo "`date`: Bind points for container:" >> ${JOB_LOG}
echo "$BIND_POINTS" | tr ',' '\n' >> ${JOB_LOG}

# rsession
########################################
# rstudio variables
# See https://docs.posit.co/ide/server-pro/reference/rserver_conf.html

# Containerized rserver starts with user space environment defined on host, but 
# the spawned rsession from rserver starts on limited environment, only related 
# to R = no SLURM*, http*, ...so anything passed to rsession needs to be set in 
# $RSTUDIO_RESSION wrapper script.
(
umask 077
sed 's/^ \{2\}//' > "${RSTUDIO_RSESSION}" << EOL
#!/usr/bin/env bash

# Log all output from this script
export RSESSION_LOG_FILE="${LOG_DIR}/rsession.log"

exec &>>"\${RSESSION_LOG_FILE}"
set -x

# Per existing scripts, some explicit envvars set here.
export TZ="US/Eastern"
export HOME="$HOME"
export R_LIBS_SITE="$R_LIBS_SITE"

# Prevent OpenMP-enhanced libraries from spawning more threads 
export OMP_NUM_THREADS=${SLURM_JOB_CPUS_PER_NODE}

# Launch the original command
echo "Launching rsession..."
exec /usr/lib/rstudio-server/bin/rsession "\${@}"
EOL
)
chmod 700 "${RSTUDIO_RSESSION}"

###########################
# Launch the RStudio Server

# Set working directory to home directory
cd "${HOME}"

# Output debug info
printf "`date`: Module list\n\t" >> ${JOB_LOG}
module list 2>> ${JOB_LOG}
echo "`date`: Executing rstudio server on `hostname`." >> ${JOB_LOG}

## fix rstudio active session error on start
current_state_files=$(echo ~/.local/share/rstudio/sessions/active/*/session-persistent-state)
for f in $current_state_files; do
  if [ -f "$f" ]; then
    echo "`date`: Fixing potential rstudio session failure error states in $f" >> ${JOB_LOG}
    sed -i -e 's/abend="[1-2]"/abend="0"/' $f
  else
    echo "$f doesn't exists. Continuing..." >> ${JOB_LOG}
  fi
done

set -x
echo "`date`: Starting up rserver..." >> ${JOB_LOG}

# Container startup
apptainer exec \
	-B "${BIND_POINTS}" \
	"$RSTUDIO_CONTAINER_URI" \
	rserver \
		--www-port "${port}" \
 		--auth-none 0 \
 		--auth-pam-helper-path "${RSTUDIO_AUTH}" \
 		--auth-encrypt-password 0 \
		--rsession-path "${RSTUDIO_RSESSION}"  \
		--server-app-armor-enabled=0 \
                --server-data-dir "${TMP_DIR}" \
                --secure-cookie-key-file "${TMP_DIR}/rstudio-server/secure-cookie-key" \
                --database-config-file "${DB_CF}" \
		--server-user "${USER}"
		--nv
